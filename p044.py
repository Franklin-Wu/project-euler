# Pentagon numbers
#
# Pentagonal numbers are generated by the formula, P_n = n(3n - 1)/2. The first ten pentagonal numbers are:
#   1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 - 22 = 48, is not pentagonal.
#
# Find the pair of pentagonal numbers, P_j and P_k, for which their sum and difference are pentagonal and D = |P_k - P_j| is minimised; what is the value of D?

import math;
import sys;
import time;

start_time = time.time();

def p_n(n):
    return n * ((3 * n) - 1) / 2;

def n_p_approximate(p):
    return (1 + round(math.sqrt(1 + 24 * float(p)))) / 6;

def n_p(p):
    n = int(n_p_approximate(p));
    if p == p_n(n):
        return n;
    else:
        return None;

# S = A + B
# D = A - B
# ==========
# S + D = 2A
#
# D = 2A - S (so D < 2A, or D/2 < A, so once D is fixed, check A starting at ceil(D/2))
# S = 2A - D
# B = S - A

MAX_N = 4000;
p = [None] * (MAX_N + 1);
for n in range(1, MAX_N + 1):
    p[n] = p_n(n);

# Convention:
# Upper case variables are the pentagonal numbers.
# Lower case variables are the indices in the pentagonal number array.
# That is, p[x] = X = the xth pentagonal number.

found = False;
# Check increasing values of d, and therefore D, so the first solution minimizes D, the difference.
for d in range(1, MAX_N + 1):
    if d % 100 == 0:
        print "%d of %d" % (d, MAX_N);
    D = p[d];
    min_A = D / 2;
    min_a = int(math.ceil(n_p_approximate(min_A)));
    for a in range(min_a, MAX_N + 1):
        A = p[a];
        S = (2 * A) - D;
        if (S > 0) and (n_p(S) != None):
            B = S - A;
            if (B > 0) and (n_p(B) != None):
                print "A = %d = p(%d)" % (A, n_p(A));
                print "B = %d = p(%d)" % (B, n_p(B));
                print "A + B = %d = p(%d)" % (S, n_p(S));
                print "A - B = %d = p(%d)" % (D, n_p(D));
                print "minimal difference = %d." % D;
                found = True;
                break;
    if found:
        break;
if not found:
    print "No solution found; increase MAX_N.";

print "Execution time = %f seconds." % (time.time() - start_time);
